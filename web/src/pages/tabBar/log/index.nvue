<template>
	<view style="padding: 2px 0px; background-color: #F5F5F5" >	
		<uni-section title="工作内容" type="line">
			<view class="uni-right" style="margin-right: 10px">
				<uni-icons type="loop" size="20"></uni-icons>
			</view>
			<view class="uni-right" @click="addItem()">
				<uni-icons type="plus" size="20"></uni-icons>
			</view>
		</uni-section>
		
		<Record :jobs.sync="jobs" :projects="projects" :modules.sync="modules" :tasks.sync="tasks" category="0"
		 	:projectNames.sync="projectNames" :moduleNames.sync="moduleNames" :taskNames.sync="taskNames" ></Record>
		

		<uni-section title="工作计划" type="line">
			<view class="uni-right" @click="addItem(1)">
				<uni-icons type="plus" size="20"></uni-icons>
			</view>
		</uni-section>

		<Record :jobs.sync="plans" :projects="projects" :modules.sync="modules" :tasks.sync="tasks" category="1"
		 	:projectNames.sync="projectNames" :moduleNames.sync="moduleNames" :taskNames.sync="taskNames" ></Record>


	</view>
</template>
<script>
	// import uLink from '@/components/uLink.vue'
	import uniBadge from "@/components/uni-badge/uni-badge.vue"
	import uniList from "@/components/uni-list/uni-list.vue"
	import uniIcons from "@/components/uni-icons/uni-icons.vue"

	import Utils from "../../../js/utils";
	import Record from "./record";
	import {Numbers, Types} from "@/js/base";	

	export default {
		components: {
			uniBadge,
			uniList,
			uniIcons,
			Record
			// uLink
		},
		data() {
			return {
				jobs: [],
				plans: [],
				projects: [],
				modules: [],
				tasks: [],
				projectNames: [],
				moduleNames: {},
				taskNames: {}

			}
		},
		onLoad() {
			this.addItem(0);
			this.addItem(1);
			console.log(12);
		},
		onReady() {
			this.test();
			this.getProjectList();
		},
		onShareAppMessage() {
			return {
				title: '欢迎体验uni-app',
				// path: '/pages/tabBar/template/template'
			}
		},
		onNavigationBarButtonTap(e) {
			// 提交
			this.checkJobs();
			
		},
		methods: {
			// 请求项目列表
			getProjectList (category) {
				Utils.ajax("/listProject", {category: category}).then( res => {
					// 为了防止字典破坏原有项目顺序
					this.projectNames = res.data.lines.map(d => d.name);
					this.projects = res.data.lines.reduce((a, b) => { a[b.name] = b; return a; }, {});
				});
			},
			
			addItem (param) {
				let item = {
					'key': new Date().getTime(),
					'open': true,
					'animation': true,
					'type': 0,
					'project': "",	// 级别1
					'module': "",	// 级别2
					'task': "",	// 级别3
					'pid': -1,
					'mid': -1,
					'tid': -1,
					'content': '',
					'mark': '',
					'preProgress': 0,
					'progress': 0,
					'lastProgress': -1	// 已设置
				};
				if (param) {
					this.plans.push(item);
				} else {
					this.jobs.push(item);
				}
			},
			
			checkJobs () {
				debugger
				let [error, warn] = ['', ''];
				for (let i = 0; i < this.jobs.length; i++) {
					let e = this.jobs[i];
					// 约束条件
					let limit = Types[e.type].limit;
					if (e.pid === -1 || e.mid === -1 || e.tid === -1) {
						error = '第' + Numbers[i] + '项的信息不完整，请检查！';
						break;
					}
					if (e.lock && e.content === '') {
						error = '第' + Numbers[i] + '项为协作任务，必须填写详细工作内容！';
						break;
					}
					if (e.progress === e.preProgress) {
						warn = '第' + Numbers[i] + '项的今日进度为 0，是否提交?';
					}
				}

				if (error !== '') {
					uni.showModal({
						title: 'Error', content: error, showCancel: false
					});
					return;
				}

				if (warn === '') {
					this.submitReport();
				} else {
					uni.showModal({
						title: 'Warning',
						content: warn,
						success: res => {
							if (res.confirm) this.submitReport();
						}
					});
				}
			},
			submitReport () {
				
				let params = JSON.stringify({'jobs': this.jobs, 'plans': this.plans});
				Utils.ajax("/submitReport", {'params': params}).then( res => {
					// 为了防止字典破坏原有项目顺序

					// this.projectNames = res.data.lines.map(d => d.name);
					// this.projects = res.data.lines.reduce((a, b) => { a[b.name] = b; return a; }, {});
				});
			},
			test () {
				// Utils.ajax("/isLogin", {}).then( res => {
				// 	debugger
				// });

				Utils.ajax("/login", {
					username: 'admin',
					password: 'admin'
				}).then(res => {
					Utils.setCache('token', res.tk);					
					Utils.getCache('token').then(d => {
						// console.log(d);
					});
				});
			}



		}
	}
</script>

<style>
	
	

	.flex-item {
		width: 33.3%;
		height: 200rpx;
		text-align: center;
		line-height: 200rpx;
		float: left;
	}

	.flex-item-V {
		width: 100%;
		height: 150rpx;
		float: left;
		text-align: center;
		line-height: 150rpx;
	}

	.text {
		margin: 15rpx 10rpx;
		padding: 0 20rpx;
		background-color: #ebebeb;
		height: 70rpx;
		line-height: 70rpx;
		text-align: center;
		color: #777;
		font-size: 26rpx;
	}
	
	@import '../../../common/uni-nvue.css';
	
	.formLine { 
		font-family: 'emoji';
		padding: 2px 10px; text-align: center
	}
	
	.example-body {
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
		padding: 0;
		font-size: 26rpx;
		background-color: #ffffff;
	}
</style>
