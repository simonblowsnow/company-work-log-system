<template>
    <view>
        <uni-collapse ref="add" class="warp" v-for="(job, idx) in jobs" :key="job.key" style="background-color: #F5F5F5!important">
            <!--滑动删除组件-->
            <uni-swipe-action>
                <uni-swipe-action-item :right-options="options" @click="clickRemove($event, idx)">
                    <!--可折叠组件-->
                    <uni-collapse-item :open="!(idx === 0 && category == 1)" :show-animation="job.animation" 
                            :title="category == 0 ? ('第' + nums[idx] + '项') : ('计划' + nums[idx])" 
                            :thumb="'/static/num_h/' + (idx < 11 ? idx + 1 : 'nm') + '.png'" style="color: #000!important; ">
                        <view class="" style="padding: 2px 0px">
                            <!-- 类型选择 -->
                            <view class="uni-title formLine" style="font-size: 30rpx; padding-left: 24px; color: #888; text-align: left">类型</view>
                            <view style="font-size: 27rpx; margin-bottom: 15px; text-align: center; font-family: fangsong;">
                                <radio-group @change="jobTypeChange($event, job)">
                                    <label class="radio" v-for="(item, j) in Types" :key="item.value" style="margin-right: 3px">
                                        <radio :value="item.value" :checked="j === job.type" />
                                        {{item.name}}
                                    </label>
                                </radio-group>
                            </view>

                            <!-- 项目选择 -->
                            <uni-combox class="formLine" v-if="Types[job.type].options[0]" 
                                    :label="Types[job.type].options[0]" labelWidth="70px" :candidates="projectNames" @input="inputChange(job, 0)"
                                        v-model="job.project" :placeholder="'请选择' + Types[job.type].options[0]" />
                            <uni-combox class="formLine" v-if="Types[job.type].options[1]" 
                                    :label="Types[job.type].options[1]" labelWidth="70px" :candidates="moduleNames[job.pid] || []" @input="inputChange(job, 1)" 
                                        v-model="job.module" :placeholder="'请选择' + Types[job.type].options[1]" />
                            <uni-combox class="formLine" v-if="Types[job.type].options[2]"  
                                    :label="Types[job.type].options[2]" labelWidth="70px" :candidates="taskNames[job.pid + '_' + job.mid] || []" @input="inputChange(job, 2)"
                                        v-model="job.task" :placeholder="'请选择' + Types[job.type].options[2]" />

                            <view style="display: flex; flex-direction: row; margin-top: 6px; overflow: hidden ">
                                <view style="height: 40px; width: 20%; padding: 8px 0px 0px 24px; font-size: 30rpx; color: #999;">进度</view>
                                <!-- <view style="height: 40px; flex: 0 0 20%; padding-top: 5px; font-size: 20rpx; overflow: hidden; color: rgb(0, 122, 255); line-height: 35px">
                                    <span v-show="job.lock || 1">今日已设置</span>
                                </view> -->
                                <!-- <view style="height: 40px; flex: 0 0 33%; padding-top: 4px;">
                                    <uni-number-box :min="job.preProgress" :max="100" :disabled="job.lock" v-model="job.progress" 
										@change="progressChange($event, job)" />
                                </view> -->
								
								<button style="width: 22px; height: 22px; line-height: 22px; padding: 0px; margin:8px 2px 5px 0px" @click="change">-</button>	
								<view style="flex: 1" class="progress">
									<label ><slider :value="job.progress" @change="progressChange($event, job)" min="0" max="100" show-value /></label>
								</view>
								<button style="width: 22px; height: 22px; line-height: 22px; padding: 0px 2px; margin:8px 2px 5px 0px" @click="change">+</button>	
								
								<view style="height: 40px; width: 35px; margin-left: 8px; padding-top: 0px;">
									<checkbox-group name="checkbox">
										<label  style="float: right;">
											<text style="font-size: 14px"> </text>
											<checkbox value="checkbox1" style="padding: 4px 8px 0px 5px" disabled="false" checked="true" />
										</label>
									</checkbox-group>
								</view>




                            </view>

                            <!-- 备注 -->
                            <view class="uni-title" style="font-size: 30rpx; color: #999; text-align: left; padding: 6px 24px;">内容</view>
                            <view class="uni-textarea" style="margin: 10px 10px 10px 25px">
                                <textarea style="background: #fff; width: 100%; height: 75px;font-size: 30rpx" :value="job.content"
                                            placeholder-style="color:#ccc" :placeholder="category==0 ? '详细工作内容' : '详细计划内容'"/>
                            </view>
                        </view>
                    </uni-collapse-item>
                </uni-swipe-action-item>
            </uni-swipe-action>
        </uni-collapse>
	</view>
</template>


<script>
	// import uLink from '@/components/uLink.vue'
	import uniBadge from "@/components/uni-badge/uni-badge.vue"
	import uniList from "@/components/uni-list/uni-list.vue"
	import uniIcons from "@/components/uni-icons/uni-icons.vue"

	import Utils from "@/js/utils";
	// import {Project, Module, Task, dataT} from "@/js/common"
	import {Numbers, Types} from "@/js/base";	


	export default {
        name: 'Record',
        props: ['projects', 'modules', 'tasks', 'projectNames', 'moduleNames', 'taskNames', 'jobs', 'category'],
		components: {
			uniBadge,
			uniList,
			uniIcons
		},
		data() {
			return {
				nums: Numbers,
                Types: Types,
				options: [{
						text: '取消',
						style: {
							backgroundColor: '#007aff'
						}
					}, {
						text: '删除',
						style: {
							backgroundColor: '#dd524d'
						}
					}
                ]
			}
		},
		methods: {
			// 请求模块列表
			getModuleList (pid) {
				Utils.ajax("/listModule", {pid: pid}).then( res => {
					let modules = res.data.reduce((a, b) => { a[b.name] = b; return a; }, {});
					this.$set(this.moduleNames, pid, res.data.map(d => d.name));
					this.$set(this.modules, pid, modules);
				});
			},
			// 请求任务列表
			getTaskList (pid, mid) {
				Utils.ajax("/listTask", {mid: mid}).then( res => {
					let k = pid + "_" + mid;
					let tasks = res.data.reduce((a, b) => { a[b.name] = b; return a; }, {});
					this.$set(this.taskNames, k, res.data.map(d => d.name));
					this.$set(this.tasks, k, tasks);
				});
			},
			getTaskStatus (job, task) {
				Utils.ajax("/getTaskControl", {tid: task.id, multi: task.multiUser}).then( res => {
					task.control = res.data;
					let lock = res.data.progress !== null;
					this.$set(job, 'lock', lock);
					this.$set(job, 'preProgress', res.data.min);
					this.$set(job, 'progress', res.data.min);
					if (lock) this.$set(job, 'lock', lock);
				});
			},
			// 用户输入项目、模块、任务
			inputChange (job, level) {
				if (level === 0) {
					[job.pid, job.mid, job.tid] = [-1, -1, -1];
					[job.module, job.task] = ["", ""];
					if (job.project in this.projects) {
						job.pid = this.projects[job.project].id;
						this.getModuleList(job.pid);
					}
				} else if (level === 1) {
					[job.mid, job.tid, job.task] = [-1, -1, ""];
					if (this.modules[job.pid] && (job.module in this.modules[job.pid])) {
						job.mid = this.modules[job.pid][job.module].id;
						this.getTaskList(job.pid, job.mid);
					}
				} else if (level === 2) {
					job.tid = -1;
					let k = job.pid + "_" + job.mid;
					if (this.tasks[k] && (job.task in this.tasks[k])) {
						job.tid = this.tasks[k][job.task].id;
						let task = this.tasks[k][job.task];
						this.getTaskStatus(job, task);
					}
				}
			},
			jobTypeChange (evt, job) {
				for (let i = 0; i < Types.length; i++) {
					if (Types[i].value === evt.target.value) {
						job.type = Types[i].code;
						break;
					}
				}
				console.log(job);
			},
			progressChange (e, job) {
				// 该文本框控件并不会真的双向绑定
				let value = job.progress = parseInt(e);
				if (value < job.preProgress) {
					// this.$set(job, 'progress', job.preProgress);
					// this.$forceUpdate();
					uni.showToast({
						title: "当前进度不能小于历史值！ \n若有变更，请至项目管理中修改计划",
						icon: 'none',
						style: {
							fontSize: "12px"
						}
					});
				}
			},
			// 滑动删除按钮检测
			clickRemove (e, idx) {
				if (e.index === 1) {
					uni.showModal({
						title: '该操作无法撤销',
						content: '是否删除',
						success: res => {
							if (res.confirm) {
								this.jobs.splice(idx, 1);
								// this.$delete(this.jobs, idx);			
							}
						}
					});
				}
			}
		}
	}
</script>

<style>
	
    .uni-combox__input, .uni-input-placeholder { 
        color: #bbb!important;
        font-size: 15px;
    }

	.flex-item {
		width: 33.3%;
		height: 200rpx;
		text-align: center;
		line-height: 200rpx;
		float: left;
	}

	.flex-item-V {
		width: 100%;
		height: 150rpx;
		float: left;
		text-align: center;
		line-height: 150rpx;
	}

	.text {
		margin: 15rpx 10rpx;
		padding: 0 20rpx;
		background-color: #ebebeb;
		height: 70rpx;
		line-height: 70rpx;
		text-align: center;
		color: #777;
		font-size: 26rpx;
	}
	
	@import '../../../common/uni-nvue.css';
	
	.formLine { 
		font-family: 'emoji';
		padding: 2px 10px; text-align: center
	}
	
	.example-body {
		/* #ifndef APP-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
		padding: 0;
		font-size: 26rpx;
		background-color: #ffffff;
	}

</style>
